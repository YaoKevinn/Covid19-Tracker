{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","className","Card","onClick","mapReRender","CardContent","Typography","color","casesTypeColors","hex","rgb","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","index","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","console","log","TileLayer","attribution","url","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","res","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","mapRender","setMapRender","name","iso2","sortedData","catch","err","getCountriesData","onCountryChanged","event","countryCode","target","fecha","updated","Date","toLocaleDateString","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","padding","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f109cd72.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./InfoBox.css\";\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\r\n\r\n    const cardClicked = () => {\r\n        props.onClick();\r\n        props.mapReRender();\r\n    }\r\n\r\n    return (\r\n        <div className=\"infoBox\">\r\n            <Card\r\n                onClick={cardClicked}\r\n                className={ active ? isRed ? \"infoBox infoBox--red\" : \"infoBox infoBox--green\" : \"infoBox\" }\r\n            >\r\n                <CardContent>\r\n                    <Typography className=\"infoBox__title\" color=\"textSecondary\">{title}</Typography>\r\n                    <h2 className={isRed ? \"infoBox__cases\" : \"infoBox__recovered\"}>{cases}</h2>\r\n                    <Typography className=\"infoBox__total\" color=\"textSecondary\">{total} Total</Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport { Circle, Popup } from 'react-leaflet';\r\n\r\nconst casesTypeColors = {\r\n    cases:{\r\n        hex: \"#CC1034\",\r\n        rgb: \"rgb(204, 16, 52)\",\r\n        multiplier: 300\r\n    },\r\n    recovered:{\r\n        hex: \"#7dd71d\",\r\n        rgb: \"rgb(125, 215, 29)\",\r\n        multiplier: 500\r\n    },\r\n    deaths:{\r\n        hex: \"#fb4443\",\r\n        rgb: \"rgb(251, 68, 67)\",\r\n        multiplier: 2000\r\n    },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    return sortedData.sort((a, b) => a.cases > b.cases ? -1 : 1);\r\n};\r\n\r\nexport const prettyPrintStat = (stat) => (\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : `+0`\r\n)\r\n\r\nexport const showDataOnMap = (data, casesType) => (\r\n    data.map((country, index) => (\r\n        <Circle\r\n            key={index}\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n            \r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div\r\n                        className=\"info-flag\"\r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                    />\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ))\r\n);","import React, { useEffect, useState } from 'react';\r\nimport \"./Map.css\";\r\nimport { MapContainer as LeafletMap, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport { showDataOnMap } from './util';\r\n\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n\r\n    return (\r\n        <div className=\"map\">\r\n            \r\n            {console.log(center)}\r\n            {console.log(zoom)}\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                { showDataOnMap(countries, casesType) }\r\n            </LeafletMap>      \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport './Table.css';\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            { \r\n                countries.map( ({ country, cases }) => (\r\n                    <tr>\r\n                        <td>{country}</td>\r\n                        <td>\r\n                            <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                        </td>\r\n                    </tr>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point:{\r\n            radius:0,\r\n        }\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function(tooltipItem, data){\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            }\r\n        }\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                }\r\n            }\r\n        ],\r\n        yAxes: [\r\n            {\r\n               gridLines: {\r\n                   display: false,\r\n               },\r\n               ticks:{\r\n                   callback: function (value, index, values){\r\n                       return numeral(value).format(\"0a\");\r\n                   }\r\n               }\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\nconst buildChartData = (data, casesType='cases') => {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n    for(let date in data[casesType]) {\r\n        if(lastDataPoint){\r\n            const newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint\r\n            }\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n}\r\n\r\n\r\nfunction LineGraph({ casesType='cases', ...props }) {\r\n\r\n    const [data, setData] = useState({});\r\n\r\n    useEffect(()=>{\r\n        const fetchData = async () => {\r\n            await  fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then( res => res.json())\r\n            .then( data => {\r\n                let chartData = buildChartData(data, casesType);\r\n                setData(chartData);\r\n            })\r\n        }\r\n        fetchData();\r\n    }, [casesType])\r\n\r\n    return (\r\n        <div className={ props.className }>\r\n            {\r\n                data?.length > 0 && (\r\n                    <Line \r\n                        options={options}\r\n                        data={{\r\n                            datasets:[\r\n                                {\r\n                                    backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                                    borderColor: \"#CC1034\",\r\n                                    data: data\r\n                                },\r\n                            ],\r\n                        }}\r\n            />\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React, { useState, useEffect } from \"react\";\nimport { \n  FormControl,\n  MenuItem,\n  Select,\n  Card,\n  CardContent,\n} from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport LineGraph from './LineGraph';\nimport { sortData, prettyPrintStat } from './util';\nimport './App.css';\nimport 'leaflet/dist/leaflet.css';\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat:34.80746, lng:-40.4796 });\n  const [mapZoom, setMapZoom] = useState(2);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapRender, setMapRender] = useState(\"false\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then( res => res.json())\n    .then( data => {\n      setCountryInfo(data);\n    })\n  }, [])\n\n  useEffect(() => {\n      // Code inside here will run once when the component loads and not again\n      // \n      const getCountriesData = async () => {\n          await fetch(\"https://disease.sh/v3/covid-19/countries\")\n          .then( (res) => res.json())\n          .then( (data) => {\n              const countries = data.map( country => (\n                {\n                  name: country.country,\n                  value: country.countryInfo.iso2\n                }\n              ));\n              const sortedData = sortData(data);\n              setTableData(sortedData);\n              setMapCountries(data);\n              setCountries(countries);\n              console.log(\"Fetch Countries data Success!!\");\n          })\n          .catch( err => console.log(\"Fetch Countries data failed: \", err));\n      }\n\n      getCountriesData();\n  }, [])\n\n  const onCountryChanged = async (event) => {\n      const countryCode = event.target.value;\n      setCountry(countryCode);\n\n      const url = countryCode === \"worldwide\" \n      ? \"https://disease.sh/v3/covid-19/all\" \n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n      await fetch(url)\n      .then( res => res.json())\n      .then( data => {\n          setCountry(countryCode);\n          setCountryInfo(data);\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4);\n          mapReRender();\n          const fecha = data.updated;\n          const date = new Date(fecha);\n          console.log(date);\n          console.log(date.toLocaleDateString());\n          \n      })\n      .catch( err => console.log(\"Fetch Country Code Failed...\", err))\n  }\n\n  const mapReRender = () => {\n     const render = !mapRender;\n     setMapRender(render);\n  }\n\n  return (\n    <div className=\"app\">\n        <div className=\"app__left\">\n            <div className=\"app__header\">\n                <h1>COVID-19 TRACKER</h1>\n                <FormControl className=\"app__dropdown\">\n                    <Select\n                      variant=\"outlined\"\n                      value={country}\n                      onChange={ event => onCountryChanged(event) }\n                    >\n                        <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                        {\n                          countries.map(country => (\n                          <MenuItem value={country.value}>{country.name}</MenuItem>\n                          ))\n                        }\n                    </Select>\n                </FormControl>\n            </div>\n            \n            <div className=\"app__stats\">\n                <InfoBox \n                    isRed\n                    active={ casesType === \"cases\" }\n                    onClick={  e => setCasesType('cases') } \n                    mapReRender={ mapReRender }\n                    title=\"Coronavirus Cases\" \n                    cases={prettyPrintStat(countryInfo.todayCases)} \n                    total={prettyPrintStat(countryInfo.cases)}\n                />\n                <InfoBox\n                    active={ casesType === \"recovered\" }\n                    onClick={ e => setCasesType('recovered') } \n                    mapReRender={ mapReRender }\n                    title=\"Recovered\" \n                    cases={prettyPrintStat(countryInfo.todayRecovered)} \n                    total={prettyPrintStat(countryInfo.recovered)} \n                />\n                <InfoBox \n                    isRed\n                    active={ casesType === \"deaths\" }\n                    onClick={ e => setCasesType('deaths') } \n                    mapReRender={ mapReRender }\n                    title=\"Deaths\" \n                    cases={prettyPrintStat(countryInfo.todayDeaths)} \n                    total={prettyPrintStat(countryInfo.deaths)} \n                />  \n            </div>\n            \n            {\n              mapRender ?　\n              <Map \n              key={1}\n              countries={mapCountries}\n              center={mapCenter}\n              zoom={mapZoom}\n              casesType={casesType}\n              />:\n              <Map \n              key={2}\n              countries={mapCountries}\n              center={mapCenter}\n              zoom={mapZoom}\n              casesType={casesType}\n              />\n            }\n\n\n        </div>\n        <Card className=\"app__right\">\n            <CardContent>\n               <h3>Live Cases by Country</h3>\n               <Table countries={tableData} />\n               <h3 style={{padding: \"20px 0\"}}>WorldWide New {casesType}</h3>\n               <LineGraph className=\"app__graph\" casesType={casesType} />\n            </CardContent>\n        </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}